// Code generated by go-swagger; DO NOT EDIT.

package systeminfo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

//go:generate mockery -name API -inpkg

// API is the interface of the systeminfo client
type API interface {
	/*
	   GetSysteminfo gets general system info

	   This API is for retrieving general system info, this can be called by anonymous request.  Some attributes will be omitted in the response when this API is called by anonymous request.
	*/
	GetSysteminfo(ctx context.Context, params *GetSysteminfoParams) (*GetSysteminfoOK, error)
	/*
	   GetSysteminfoGetcert gets default root certificate

	   This endpoint is for downloading a default root certificate.
	*/
	GetSysteminfoGetcert(ctx context.Context, params *GetSysteminfoGetcertParams, writer io.Writer) (*GetSysteminfoGetcertOK, error)
	/*
	   GetSysteminfoVolumes gets system volume info total free size

	   This endpoint is for retrieving system volume info that only provides for admin user.  Note that the response only reflects the storage status of local disk.
	*/
	GetSysteminfoVolumes(ctx context.Context, params *GetSysteminfoVolumesParams) (*GetSysteminfoVolumesOK, error)
}

// New creates a new systeminfo API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for systeminfo API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
GetSysteminfo gets general system info

This API is for retrieving general system info, this can be called by anonymous request.  Some attributes will be omitted in the response when this API is called by anonymous request.

*/
func (a *Client) GetSysteminfo(ctx context.Context, params *GetSysteminfoParams) (*GetSysteminfoOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSysteminfo",
		Method:             "GET",
		PathPattern:        "/systeminfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSysteminfoReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSysteminfoOK), nil

}

/*
GetSysteminfoGetcert gets default root certificate

This endpoint is for downloading a default root certificate.

*/
func (a *Client) GetSysteminfoGetcert(ctx context.Context, params *GetSysteminfoGetcertParams, writer io.Writer) (*GetSysteminfoGetcertOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSysteminfoGetcert",
		Method:             "GET",
		PathPattern:        "/systeminfo/getcert",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSysteminfoGetcertReader{formats: a.formats, writer: writer},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSysteminfoGetcertOK), nil

}

/*
GetSysteminfoVolumes gets system volume info total free size

This endpoint is for retrieving system volume info that only provides for admin user.  Note that the response only reflects the storage status of local disk.

*/
func (a *Client) GetSysteminfoVolumes(ctx context.Context, params *GetSysteminfoVolumesParams) (*GetSysteminfoVolumesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSysteminfoVolumes",
		Method:             "GET",
		PathPattern:        "/systeminfo/volumes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSysteminfoVolumesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            ctx,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSysteminfoVolumesOK), nil

}
